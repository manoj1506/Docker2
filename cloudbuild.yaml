steps:
# Step 1: Build the Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'asia-south1-docker.pkg.dev/alpine-practice-406505/docker2/app:$SHORT_SHA', '.']
  id: 'Build Docker Image'
  waitFor: ['-']  # This ensures the step starts immediately. 

# Step 2: Push the Docker image to Google Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'asia-south1-docker.pkg.dev/alpine-practice-406505/docker2/app:$SHORT_SHA']
  id: 'Push to Artifact Registry'
  waitFor: ['Build Docker Image']  # This ensures the push only happens after the build step completes.

# Step 3: Apply the Deployment
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'apply'
  - '-f'
  - 'app-deployment.yaml'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=asia-south1' 
  - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'
  id: 'Apply Deployment'
  waitFor: ['Push to Artifact Registry']

# Step 4: Deploy to GKE
- name: 'gcr.io/cloud-builders/kubectl'
  args: 
  - 'set'
  - 'image'
  - 'deployment/app-deployment'
  - 'app=asia-south1-docker.pkg.dev/alpine-practice-406505/docker2/app:$SHORT_SHA'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=asia-south1' 
  - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'
  id: 'Deploy to GKE'
  waitFor: ['Apply Deployment']

# Step 5: Applying the Service.yaml file
- name: 'gcr.io/cloud-builders/kubectl'
  args: 
  - 'apply'
  - '-f'
  - 'service.yaml'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=asia-south1' 
  - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'
  id: 'Apply Service'
  waitFor: ['Deploy to GKE']

